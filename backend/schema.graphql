# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Mutation {
  addToCart(productId: ID): wb_cart_item
  checkout(token: String!): wb_order
  createwb_user(data: wb_userCreateInput!): wb_user
  createWbUsers(data: [wb_userCreateInput!]!): [wb_user]
  updatewb_user(
    where: wb_userWhereUniqueInput!
    data: wb_userUpdateInput!
  ): wb_user
  updateWbUsers(data: [wb_userUpdateArgs!]!): [wb_user]
  deletewb_user(where: wb_userWhereUniqueInput!): wb_user
  deleteWbUsers(where: [wb_userWhereUniqueInput!]!): [wb_user]
  createwb_product(data: wb_productCreateInput!): wb_product
  createWbProducts(data: [wb_productCreateInput!]!): [wb_product]
  updatewb_product(
    where: wb_productWhereUniqueInput!
    data: wb_productUpdateInput!
  ): wb_product
  updateWbProducts(data: [wb_productUpdateArgs!]!): [wb_product]
  deletewb_product(where: wb_productWhereUniqueInput!): wb_product
  deleteWbProducts(where: [wb_productWhereUniqueInput!]!): [wb_product]
  createwb_product_image(data: wb_product_imageCreateInput!): wb_product_image
  createWbProductImages(
    data: [wb_product_imageCreateInput!]!
  ): [wb_product_image]
  updatewb_product_image(
    where: wb_product_imageWhereUniqueInput!
    data: wb_product_imageUpdateInput!
  ): wb_product_image
  updateWbProductImages(
    data: [wb_product_imageUpdateArgs!]!
  ): [wb_product_image]
  deletewb_product_image(
    where: wb_product_imageWhereUniqueInput!
  ): wb_product_image
  deleteWbProductImages(
    where: [wb_product_imageWhereUniqueInput!]!
  ): [wb_product_image]
  createwb_cart_item(data: wb_cart_itemCreateInput!): wb_cart_item
  createWbCartItems(data: [wb_cart_itemCreateInput!]!): [wb_cart_item]
  updatewb_cart_item(
    where: wb_cart_itemWhereUniqueInput!
    data: wb_cart_itemUpdateInput!
  ): wb_cart_item
  updateWbCartItems(data: [wb_cart_itemUpdateArgs!]!): [wb_cart_item]
  deletewb_cart_item(where: wb_cart_itemWhereUniqueInput!): wb_cart_item
  deleteWbCartItems(where: [wb_cart_itemWhereUniqueInput!]!): [wb_cart_item]
  createwb_order(data: wb_orderCreateInput!): wb_order
  createWbOrders(data: [wb_orderCreateInput!]!): [wb_order]
  updatewb_order(
    where: wb_orderWhereUniqueInput!
    data: wb_orderUpdateInput!
  ): wb_order
  updateWbOrders(data: [wb_orderUpdateArgs!]!): [wb_order]
  deletewb_order(where: wb_orderWhereUniqueInput!): wb_order
  deleteWbOrders(where: [wb_orderWhereUniqueInput!]!): [wb_order]
  createwb_order_item(data: wb_order_itemCreateInput!): wb_order_item
  createWbOrderItems(data: [wb_order_itemCreateInput!]!): [wb_order_item]
  updatewb_order_item(
    where: wb_order_itemWhereUniqueInput!
    data: wb_order_itemUpdateInput!
  ): wb_order_item
  updateWbOrderItems(data: [wb_order_itemUpdateArgs!]!): [wb_order_item]
  deletewb_order_item(where: wb_order_itemWhereUniqueInput!): wb_order_item
  deleteWbOrderItems(where: [wb_order_itemWhereUniqueInput!]!): [wb_order_item]
  createwb_role(data: wb_roleCreateInput!): wb_role
  createWbRoles(data: [wb_roleCreateInput!]!): [wb_role]
  updatewb_role(
    where: wb_roleWhereUniqueInput!
    data: wb_roleUpdateInput!
  ): wb_role
  updateWbRoles(data: [wb_roleUpdateArgs!]!): [wb_role]
  deletewb_role(where: wb_roleWhereUniqueInput!): wb_role
  deleteWbRoles(where: [wb_roleWhereUniqueInput!]!): [wb_role]
  endSession: Boolean!
  authenticatewb_userWithPassword(
    email: String!
    password: String!
  ): wb_userAuthenticationWithPasswordResult
  createInitialwb_user(
    data: CreateInitialwb_userInput!
  ): wb_userAuthenticationWithPasswordSuccess!
  sendwb_userPasswordResetLink(email: String!): Boolean!
  redeemwb_userPasswordResetToken(
    email: String!
    token: String!
    password: String!
  ): Redeemwb_userPasswordResetTokenResult
  sendwb_userMagicAuthLink(email: String!): Boolean!
  redeemwb_userMagicAuthToken(
    email: String!
    token: String!
  ): Redeemwb_userMagicAuthTokenResult!
}

type wb_user {
  id: ID!
  username: String
  email: String
  password: PasswordState
  cart_item(
    where: wb_cart_itemWhereInput! = {}
    orderBy: [wb_cart_itemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [wb_cart_item!]
  cart_itemCount(where: wb_cart_itemWhereInput! = {}): Int
  orders(
    where: wb_orderWhereInput! = {}
    orderBy: [wb_orderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [wb_order!]
  ordersCount(where: wb_orderWhereInput! = {}): Int
  id_role: wb_role
  passwordResetToken: PasswordState
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
  magicAuthToken: PasswordState
  magicAuthIssuedAt: DateTime
  magicAuthRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input wb_userWhereUniqueInput {
  id: ID
  email: String
}

input wb_userWhereInput {
  AND: [wb_userWhereInput!]
  OR: [wb_userWhereInput!]
  NOT: [wb_userWhereInput!]
  id: IDFilter
  username: StringFilter
  email: StringFilter
  password: PasswordFilter
  cart_item: wb_cart_itemManyRelationFilter
  orders: wb_orderManyRelationFilter
  id_role: wb_roleWhereInput
  passwordResetToken: PasswordFilter
  passwordResetIssuedAt: DateTimeNullableFilter
  passwordResetRedeemedAt: DateTimeNullableFilter
  magicAuthToken: PasswordFilter
  magicAuthIssuedAt: DateTimeNullableFilter
  magicAuthRedeemedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input wb_cart_itemManyRelationFilter {
  every: wb_cart_itemWhereInput
  some: wb_cart_itemWhereInput
  none: wb_cart_itemWhereInput
}

input wb_orderManyRelationFilter {
  every: wb_orderWhereInput
  some: wb_orderWhereInput
  none: wb_orderWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input wb_userOrderByInput {
  id: OrderDirection
  username: OrderDirection
  email: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
  magicAuthIssuedAt: OrderDirection
  magicAuthRedeemedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input wb_userUpdateInput {
  username: String
  email: String
  password: String
  cart_item: wb_cart_itemRelateToManyForUpdateInput
  orders: wb_orderRelateToManyForUpdateInput
  id_role: wb_roleRelateToOneForUpdateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
  magicAuthToken: String
  magicAuthIssuedAt: DateTime
  magicAuthRedeemedAt: DateTime
}

input wb_cart_itemRelateToManyForUpdateInput {
  disconnect: [wb_cart_itemWhereUniqueInput!]
  set: [wb_cart_itemWhereUniqueInput!]
  create: [wb_cart_itemCreateInput!]
  connect: [wb_cart_itemWhereUniqueInput!]
}

input wb_orderRelateToManyForUpdateInput {
  disconnect: [wb_orderWhereUniqueInput!]
  set: [wb_orderWhereUniqueInput!]
  create: [wb_orderCreateInput!]
  connect: [wb_orderWhereUniqueInput!]
}

input wb_roleRelateToOneForUpdateInput {
  create: wb_roleCreateInput
  connect: wb_roleWhereUniqueInput
  disconnect: Boolean
}

input wb_userUpdateArgs {
  where: wb_userWhereUniqueInput!
  data: wb_userUpdateInput!
}

input wb_userCreateInput {
  username: String
  email: String
  password: String
  cart_item: wb_cart_itemRelateToManyForCreateInput
  orders: wb_orderRelateToManyForCreateInput
  id_role: wb_roleRelateToOneForCreateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
  magicAuthToken: String
  magicAuthIssuedAt: DateTime
  magicAuthRedeemedAt: DateTime
}

input wb_cart_itemRelateToManyForCreateInput {
  create: [wb_cart_itemCreateInput!]
  connect: [wb_cart_itemWhereUniqueInput!]
}

input wb_orderRelateToManyForCreateInput {
  create: [wb_orderCreateInput!]
  connect: [wb_orderWhereUniqueInput!]
}

input wb_roleRelateToOneForCreateInput {
  create: wb_roleCreateInput
  connect: wb_roleWhereUniqueInput
}

type wb_product {
  id: ID!
  name: String
  description: String
  id_product_image: wb_product_image
  status: String
  price: Int
}

input wb_productWhereUniqueInput {
  id: ID
}

input wb_productWhereInput {
  AND: [wb_productWhereInput!]
  OR: [wb_productWhereInput!]
  NOT: [wb_productWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  id_product_image: wb_product_imageWhereInput
  status: StringNullableFilter
  price: IntNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input wb_productOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  status: OrderDirection
  price: OrderDirection
}

input wb_productUpdateInput {
  name: String
  description: String
  id_product_image: wb_product_imageRelateToOneForUpdateInput
  status: String
  price: Int
}

input wb_product_imageRelateToOneForUpdateInput {
  create: wb_product_imageCreateInput
  connect: wb_product_imageWhereUniqueInput
  disconnect: Boolean
}

input wb_productUpdateArgs {
  where: wb_productWhereUniqueInput!
  data: wb_productUpdateInput!
}

input wb_productCreateInput {
  name: String
  description: String
  id_product_image: wb_product_imageRelateToOneForCreateInput
  status: String
  price: Int
}

input wb_product_imageRelateToOneForCreateInput {
  create: wb_product_imageCreateInput
  connect: wb_product_imageWhereUniqueInput
}

type wb_product_image {
  id: ID!
  image: CloudinaryImage_File
  alt_text: String
  product: wb_product
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
   Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input wb_product_imageWhereUniqueInput {
  id: ID
}

input wb_product_imageWhereInput {
  AND: [wb_product_imageWhereInput!]
  OR: [wb_product_imageWhereInput!]
  NOT: [wb_product_imageWhereInput!]
  id: IDFilter
  alt_text: StringFilter
  product: wb_productWhereInput
}

input wb_product_imageOrderByInput {
  id: OrderDirection
  alt_text: OrderDirection
}

input wb_product_imageUpdateInput {
  image: Upload
  alt_text: String
  product: wb_productRelateToOneForUpdateInput
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input wb_productRelateToOneForUpdateInput {
  create: wb_productCreateInput
  connect: wb_productWhereUniqueInput
  disconnect: Boolean
}

input wb_product_imageUpdateArgs {
  where: wb_product_imageWhereUniqueInput!
  data: wb_product_imageUpdateInput!
}

input wb_product_imageCreateInput {
  image: Upload
  alt_text: String
  product: wb_productRelateToOneForCreateInput
}

input wb_productRelateToOneForCreateInput {
  create: wb_productCreateInput
  connect: wb_productWhereUniqueInput
}

type wb_cart_item {
  id: ID!
  quantity: Int
  id_product: wb_product
  id_user: wb_user
}

input wb_cart_itemWhereUniqueInput {
  id: ID
}

input wb_cart_itemWhereInput {
  AND: [wb_cart_itemWhereInput!]
  OR: [wb_cart_itemWhereInput!]
  NOT: [wb_cart_itemWhereInput!]
  id: IDFilter
  quantity: IntFilter
  id_product: wb_productWhereInput
  id_user: wb_userWhereInput
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input wb_cart_itemOrderByInput {
  id: OrderDirection
  quantity: OrderDirection
}

input wb_cart_itemUpdateInput {
  quantity: Int
  id_product: wb_productRelateToOneForUpdateInput
  id_user: wb_userRelateToOneForUpdateInput
}

input wb_userRelateToOneForUpdateInput {
  create: wb_userCreateInput
  connect: wb_userWhereUniqueInput
  disconnect: Boolean
}

input wb_cart_itemUpdateArgs {
  where: wb_cart_itemWhereUniqueInput!
  data: wb_cart_itemUpdateInput!
}

input wb_cart_itemCreateInput {
  quantity: Int
  id_product: wb_productRelateToOneForCreateInput
  id_user: wb_userRelateToOneForCreateInput
}

input wb_userRelateToOneForCreateInput {
  create: wb_userCreateInput
  connect: wb_userWhereUniqueInput
}

type wb_order {
  id: ID!
  label: String
  total: Int
  order_item(
    where: wb_order_itemWhereInput! = {}
    orderBy: [wb_order_itemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [wb_order_item!]
  order_itemCount(where: wb_order_itemWhereInput! = {}): Int
  user: wb_user
  charge: String
}

input wb_orderWhereUniqueInput {
  id: ID
}

input wb_orderWhereInput {
  AND: [wb_orderWhereInput!]
  OR: [wb_orderWhereInput!]
  NOT: [wb_orderWhereInput!]
  id: IDFilter
  total: IntNullableFilter
  order_item: wb_order_itemManyRelationFilter
  user: wb_userWhereInput
  charge: StringFilter
}

input wb_order_itemManyRelationFilter {
  every: wb_order_itemWhereInput
  some: wb_order_itemWhereInput
  none: wb_order_itemWhereInput
}

input wb_orderOrderByInput {
  id: OrderDirection
  total: OrderDirection
  charge: OrderDirection
}

input wb_orderUpdateInput {
  total: Int
  order_item: wb_order_itemRelateToManyForUpdateInput
  user: wb_userRelateToOneForUpdateInput
  charge: String
}

input wb_order_itemRelateToManyForUpdateInput {
  disconnect: [wb_order_itemWhereUniqueInput!]
  set: [wb_order_itemWhereUniqueInput!]
  create: [wb_order_itemCreateInput!]
  connect: [wb_order_itemWhereUniqueInput!]
}

input wb_orderUpdateArgs {
  where: wb_orderWhereUniqueInput!
  data: wb_orderUpdateInput!
}

input wb_orderCreateInput {
  total: Int
  order_item: wb_order_itemRelateToManyForCreateInput
  user: wb_userRelateToOneForCreateInput
  charge: String
}

input wb_order_itemRelateToManyForCreateInput {
  create: [wb_order_itemCreateInput!]
  connect: [wb_order_itemWhereUniqueInput!]
}

type wb_order_item {
  id: ID!
  name: String
  description: String
  id_product_image: wb_product_image
  price: Int
  quantity: Int
  id_order: wb_order
}

input wb_order_itemWhereUniqueInput {
  id: ID
}

input wb_order_itemWhereInput {
  AND: [wb_order_itemWhereInput!]
  OR: [wb_order_itemWhereInput!]
  NOT: [wb_order_itemWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  id_product_image: wb_product_imageWhereInput
  price: IntNullableFilter
  quantity: IntNullableFilter
  id_order: wb_orderWhereInput
}

input wb_order_itemOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  price: OrderDirection
  quantity: OrderDirection
}

input wb_order_itemUpdateInput {
  name: String
  description: String
  id_product_image: wb_product_imageRelateToOneForUpdateInput
  price: Int
  quantity: Int
  id_order: wb_orderRelateToOneForUpdateInput
}

input wb_orderRelateToOneForUpdateInput {
  create: wb_orderCreateInput
  connect: wb_orderWhereUniqueInput
  disconnect: Boolean
}

input wb_order_itemUpdateArgs {
  where: wb_order_itemWhereUniqueInput!
  data: wb_order_itemUpdateInput!
}

input wb_order_itemCreateInput {
  name: String
  description: String
  id_product_image: wb_product_imageRelateToOneForCreateInput
  price: Int
  quantity: Int
  id_order: wb_orderRelateToOneForCreateInput
}

input wb_orderRelateToOneForCreateInput {
  create: wb_orderCreateInput
  connect: wb_orderWhereUniqueInput
}

type wb_role {
  id: ID!
  name: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
}

input wb_roleWhereUniqueInput {
  id: ID
}

input wb_roleWhereInput {
  AND: [wb_roleWhereInput!]
  OR: [wb_roleWhereInput!]
  NOT: [wb_roleWhereInput!]
  id: IDFilter
  name: StringFilter
  canManageProducts: BooleanFilter
  canSeeOtherUsers: BooleanFilter
  canManageUsers: BooleanFilter
  canManageRoles: BooleanFilter
  canManageCart: BooleanFilter
  canManageOrders: BooleanFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input wb_roleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canManageProducts: OrderDirection
  canSeeOtherUsers: OrderDirection
  canManageUsers: OrderDirection
  canManageRoles: OrderDirection
  canManageCart: OrderDirection
  canManageOrders: OrderDirection
}

input wb_roleUpdateInput {
  name: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
}

input wb_roleUpdateArgs {
  where: wb_roleWhereUniqueInput!
  data: wb_roleUpdateInput!
}

input wb_roleCreateInput {
  name: String
  canManageProducts: Boolean
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageCart: Boolean
  canManageOrders: Boolean
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

union wb_userAuthenticationWithPasswordResult =
    wb_userAuthenticationWithPasswordSuccess
  | wb_userAuthenticationWithPasswordFailure

type wb_userAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: wb_user!
}

type wb_userAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialwb_userInput {
  username: String
  email: String
  password: String
}

type Redeemwb_userPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

union Redeemwb_userMagicAuthTokenResult =
    Redeemwb_userMagicAuthTokenSuccess
  | Redeemwb_userMagicAuthTokenFailure

type Redeemwb_userMagicAuthTokenSuccess {
  token: String!
  item: wb_user!
}

type Redeemwb_userMagicAuthTokenFailure {
  code: MagicLinkRedemptionErrorCode!
  message: String!
}

enum MagicLinkRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  wbUsers(
    where: wb_userWhereInput! = {}
    orderBy: [wb_userOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [wb_user!]
  wb_user(where: wb_userWhereUniqueInput!): wb_user
  wbUsersCount(where: wb_userWhereInput! = {}): Int
  wbProducts(
    where: wb_productWhereInput! = {}
    orderBy: [wb_productOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [wb_product!]
  wb_product(where: wb_productWhereUniqueInput!): wb_product
  wbProductsCount(where: wb_productWhereInput! = {}): Int
  wbProductImages(
    where: wb_product_imageWhereInput! = {}
    orderBy: [wb_product_imageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [wb_product_image!]
  wb_product_image(where: wb_product_imageWhereUniqueInput!): wb_product_image
  wbProductImagesCount(where: wb_product_imageWhereInput! = {}): Int
  wbCartItems(
    where: wb_cart_itemWhereInput! = {}
    orderBy: [wb_cart_itemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [wb_cart_item!]
  wb_cart_item(where: wb_cart_itemWhereUniqueInput!): wb_cart_item
  wbCartItemsCount(where: wb_cart_itemWhereInput! = {}): Int
  wbOrders(
    where: wb_orderWhereInput! = {}
    orderBy: [wb_orderOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [wb_order!]
  wb_order(where: wb_orderWhereUniqueInput!): wb_order
  wbOrdersCount(where: wb_orderWhereInput! = {}): Int
  wbOrderItems(
    where: wb_order_itemWhereInput! = {}
    orderBy: [wb_order_itemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [wb_order_item!]
  wb_order_item(where: wb_order_itemWhereUniqueInput!): wb_order_item
  wbOrderItemsCount(where: wb_order_itemWhereInput! = {}): Int
  wbRoles(
    where: wb_roleWhereInput! = {}
    orderBy: [wb_roleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [wb_role!]
  wb_role(where: wb_roleWhereUniqueInput!): wb_role
  wbRolesCount(where: wb_roleWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  validatewb_userPasswordResetToken(
    email: String!
    token: String!
  ): Validatewb_userPasswordResetTokenResult
}

union AuthenticatedItem = wb_user

type Validatewb_userPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
